---
name: knowledge-curator

networks:
  knowledge-net:
    driver: bridge
  plone-internal:
    driver: bridge

services:
  # ========================================
  # AI Infrastructure Services
  # ========================================
  qdrant:
    image: qdrant/qdrant:latest
    profiles: ["ai", "full", "integration"]
    ports:
      - "6333:6333"
      - "6334:6334" 
    volumes:
      - vol-qdrant-data:/qdrant/storage
    networks:
      - knowledge-net
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    profiles: ["ai", "full", "integration"]
    ports:
      - "6379:6379"
    volumes:
      - vol-redis-data:/data
    networks:
      - knowledge-net
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  mailhog:
    image: mailhog/mailhog:latest
    profiles: ["ai", "full", "integration", "dev"]
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - knowledge-net

  # ========================================
  # Web Application Services  
  # ========================================
  traefik:
    image: traefik:v2.11
    profiles: ["web", "full", "integration"]
    ports:
      # Change host port to 8080 to avoid conflicts / reset issues on macOS
      - 8080:80
    networks:
      - knowledge-net
      - plone-internal

    labels:
      - traefik.enable=true
      - traefik.constraint-label=public
      - traefik.http.routers.traefik-public-http.rule=Host(`traefik.knowledge-curator.localhost`)
      - traefik.http.routers.traefik-public-http.entrypoints=http
      - traefik.http.routers.traefik-public-http.service=api@internal
      - traefik.http.services.traefik-public.loadbalancer.server.port=8000

      # GENERIC MIDDLEWARES
      - traefik.http.middlewares.gzip.compress=true
      - traefik.http.middlewares.gzip.compress.excludedcontenttypes=image/png, image/jpeg, font/woff2

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

    command:
      - --providers.docker
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `public`)
      - --providers.docker.exposedbydefault=false
      - --entrypoints.http.address=:80
      - --accesslog
      - --log
      - --api
  purger:
    image: ghcr.io/kitconcept/cluster-purger:latest
    profiles: ["web", "full", "integration"]
    networks:
      - plone-internal
    environment:
      PURGER_SERVICE_NAME: varnish
      PURGER_SERVICE_PORT: 80
      PURGER_MODE: "compose"
      PURGER_PUBLIC_SITES: "['knowledge-curator.localhost']"

  varnish:
    build:
      context: devops/varnish
    profiles: ["web", "full", "integration"]
    networks:
      - plone-internal
    labels:
      - traefik.enable=true
      - traefik.constraint-label=public
      # SERVICE
      - traefik.http.services.svc-varnish.loadbalancer.server.port=80
    depends_on:
      - backend
  frontend:
    build:
      context: ./frontend
      args:
        - VOLTO_VERSION=${VOLTO_VERSION:-18.0}
    profiles: ["web", "full", "integration"]
    networks:
      - plone-internal
    environment:
      RAZZLE_INTERNAL_API_PATH: http://backend:8080/Plone
    depends_on:
      - backend
    labels:
      - traefik.enable=true
      - traefik.constraint-label=public
      # Service
      - traefik.http.services.svc-frontend.loadbalancer.server.port=3000
      # Routers
      ## /
      ### Router: Varnish Public
      - traefik.http.routers.rt-frontend-public.rule=Host(`knowledge-curator.localhost`)
      - traefik.http.routers.rt-frontend-public.entrypoints=http
      # Serve Volto directly at / instead of ClassicUI
      - traefik.http.routers.rt-frontend-public.service=svc-frontend
      - traefik.http.routers.rt-frontend-public.middlewares=gzip
      ### Router: Internal
      - traefik.http.routers.rt-frontend-internal.rule=Host(`knowledge-curator.localhost`) && Headers(`X-Varnish-Routed`, `1`)
      - traefik.http.routers.rt-frontend-internal.entrypoints=http
      - traefik.http.routers.rt-frontend-internal.service=svc-frontend

  backend:
    build:
      context: ./backend
      args:
        - PLONE_VERSION=${PLONE_VERSION:-6.0}
    profiles: ["web", "full", "integration"]
    networks:
      - plone-internal
      - knowledge-net
    environment:
      RELSTORAGE_DSN: "dbname='${DB_NAME:-plone}' user='${DB_NAME:-plone}' host='${DB_HOST:-db}' password='${DB_PASSWORD}' port='${DB_PORT:-5432}'"
      REDIS_URL: "redis://redis:6379/0"
      QDRANT_HOST: "qdrant"
      QDRANT_PORT: "6333"
      DELETE_EXISTING: "${DELETE_EXISTING:-0}"
      CREATE_DEMO_DATA: "${CREATE_DEMO_DATA:-1}"  # Enable demo data by default
      SITE: "Plone"  # Automatically create a Plone site with this ID
    depends_on:
      - db
    labels:
      - traefik.enable=true
      - traefik.constraint-label=public
      # Services
      - traefik.http.services.svc-backend.loadbalancer.server.port=8080

      # Middlewares
      ## CORS middleware
      - "traefik.http.middlewares.cors.headers.accessControlAllowOriginList=*"
      - "traefik.http.middlewares.cors.headers.accessControlAllowMethods=GET,OPTIONS,PUT,PATCH,POST,DELETE"
      - "traefik.http.middlewares.cors.headers.accessControlAllowHeaders=*"
      ## VHM rewrite /++api++/
      - "traefik.http.middlewares.mw-backend-vhm-api.replacepathregex.regex=^/\\+\\+api\\+\\+($$|/.*)"
      - "traefik.http.middlewares.mw-backend-vhm-api.replacepathregex.replacement=/VirtualHostBase/http/knowledge-curator.localhost/Plone/++api++/VirtualHostRoot$$1"

      ## VHM rewrite /ClassicUI/
      - "traefik.http.middlewares.mw-backend-vhm-classic.replacepathregex.regex=^/ClassicUI($$|/.*)"
      - "traefik.http.middlewares.mw-backend-vhm-classic.replacepathregex.replacement=/VirtualHostBase/http/knowledge-curator.localhost/Plone/VirtualHostRoot/_vh_ClassicUI$$1"

      ## Basic Authentication
      ### Note: all dollar signs in the hash need to be doubled for escaping.
      ### To create user:password pair, it's possible to use this command:
      ### echo $(htpasswd -nb user password) | sed -e s/\\$/\\$\\$/g
      ### Defaults to admin:admin
      - traefik.http.middlewares.mw-backend-auth.basicauth.users=admin:$$apr1$$uZPT5Fgu$$AmlIdamxT5ipBvPlsdfD70
      # Routers
      ## /++api++/
      ### Router: Varnish Public
      - traefik.http.routers.rt-backend-api-public.rule=Host(`knowledge-curator.localhost`) && PathPrefix(`/++api++`)
      - traefik.http.routers.rt-backend-api-public.entrypoints=http
      - traefik.http.routers.rt-backend-api-public.service=svc-varnish
      - traefik.http.routers.rt-backend-api-public.middlewares=gzip,cors

      ### Router: Internal
      - traefik.http.routers.rt-backend-api-internal.rule=Host(`knowledge-curator.localhost`) && PathPrefix(`/++api++`) && Headers(`X-Varnish-Routed`, `1`)
      - traefik.http.routers.rt-backend-api-internal.entrypoints=http
      - traefik.http.routers.rt-backend-api-internal.service=svc-backend
      - traefik.http.routers.rt-backend-api-internal.middlewares=gzip,mw-backend-vhm-api,cors
      ## /ClassicUI
      - traefik.http.routers.rt-backend-classic.rule=Host(`knowledge-curator.localhost`) && PathPrefix(`/ClassicUI`)
      - traefik.http.routers.rt-backend-classic.entrypoints=http
      - traefik.http.routers.rt-backend-classic.service=svc-backend
      - traefik.http.routers.rt-backend-classic.middlewares=gzip,mw-backend-auth,mw-backend-vhm-classic,cors

  db:
    image: postgres:14.15
    profiles: ["web", "full", "integration"]
    networks:
      - plone-internal
    environment:
      POSTGRES_USER: plone
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: plone
    volumes:
      - vol-site-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U plone -d plone"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  vol-site-data: {}
  vol-qdrant-data: {}
  vol-redis-data: {}
